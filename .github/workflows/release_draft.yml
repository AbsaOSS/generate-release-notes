#
# Copyright 2023 ABSA Group Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Release - create draft release
on:
  workflow_dispatch:
    inputs:
      tag-name:
        description: 'Name of git tag to be created, and then draft release created. Syntax: "v[0-9]+.[0-9]+.[0-9]+".'
        required: true

jobs:
  check-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Validate format of received tag
        uses: actions/github-script@v7
        with:
          script: |
            const newTag = core.getInput('tag-name');
            const regex = /^v[0-9]+\.[0-9]+\.[0-9]+$/;

            if (!regex.test(newTag)) {
              core.setFailed('Tag does not match the required format "v[0-9]+.[0-9]+.[0-9]+"');
              return;
            }
          tag-name: ${{ github.event.inputs.tag-name }}

#      - name: Check tag's correct version increment
#        uses: actions/github-script@v7
#        with:
#          script: |
#            const newTag = core.getInput('tag-name');
#
#            // get latest tag
#            const { data: refs } = await github.rest.git.listMatchingRefs({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              ref: 'tags/'
#            });
#
#            if (refs.length === 0) {
#              // No existing tags, so any new tag is valid
#              console.log('No existing tags found. Any new tag is considered valid.');
#              return;
#            }
#
#            const latestTag = refs.sort((a, b) => new Date(b.object.date) - new Date(a.object.date))[0].ref.replace('refs/tags/', '');
#            const latestVersion = latestTag.replace('v', '').split('.').map(Number);
#            const newVersion = newTag.replace('v', '').split('.').map(Number);
#
#            // check tag's correct version increase
#            const isValid = (latestVersion[0] === newVersion[0] && latestVersion[1] === newVersion[1] && newVersion[2] === latestVersion[2] + 1) ||
#              (latestVersion[0] === newVersion[0] && newVersion[1] === latestVersion[1] + 1 && newVersion[2] === 0) ||
#              (newVersion[0] === latestVersion[0] + 1 && newVersion[1] === 0 && newVersion[2] === 0);
#
#            if (!isValid) {
#              core.setFailed('New tag is not one version higher than the latest tag');
#              return;
#            }
#
#          tag-name: ${{ github.event.inputs.tag-name }}

  release-draft:
    needs: check-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: actions/setup-python@v5.1.1
        with:
          python-version: '3.11'

      - name: Generate Release Notes
        id: generate_release_notes
        uses: AbsaOSS/generate-release-notes@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag-name: ${{ github.event.inputs.tag-name }}
          chapters: '[
            {"title": "No entry 🚫", "label": "duplicate"},
            {"title": "No entry 🚫", "label": "invalid"},
            {"title": "No entry 🚫", "label": "wontfix"},
            {"title": "No entry 🚫", "label": "no RN"},
            {"title": "Breaking Changes 💥", "label": "breaking-change"},
            {"title": "New Features 🎉", "label": "enhancement"},
            {"title": "New Features 🎉", "label": "feature"},
            {"title": "Bugfixes 🛠", "label": "bug"},
            {"title": "Infrastructure ⚙️", "label": "infrastructure"},
            {"title": "Silent-live 🤫", "label": "silent-live"},
            {"title": "Documentation 📜", "label": "documentation"}
          ]'
          skip-release-notes-label: 'no RN'
          verbose: true

          warnings: true
          print-empty-chapters: true
          chapters-to-pr-without-issue: true


      - name: Create and Push Tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = core.getInput('tag-name')
            const ref = `refs/tags/${tag}`;
            const sha = context.sha; // The SHA of the commit to tag

            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: ref,
              sha: sha
            });

            console.log(`Tag created: ${tag}`);
          github-token: ${{ secrets.GITHUB_TOKEN }}
          tag-name: ${{ github.event.inputs.tag-name }}

      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.event.inputs.tag-name }}
          body: ${{ steps.generate_release_notes.outputs.release-notes }}
          tag_name: ${{ github.event.inputs.tag-name }}
          draft: true
          prerelease: false
